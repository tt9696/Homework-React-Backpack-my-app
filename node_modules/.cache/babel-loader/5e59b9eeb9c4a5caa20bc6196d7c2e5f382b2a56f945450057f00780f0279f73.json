{"ast":null,"code":"/*\n * Backpack - Skyscanner's Design System\n *\n * Copyright 2016 Skyscanner Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addDays } from 'date-fns/addDays';\nimport { addMonths } from 'date-fns/addMonths';\nimport { differenceInCalendarMonths } from 'date-fns/differenceInCalendarMonths';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { format } from 'date-fns/format';\nimport { getDay } from 'date-fns/getDay';\nimport { isAfter } from 'date-fns/isAfter';\nimport { isBefore } from 'date-fns/isBefore';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isSameWeek } from 'date-fns/isSameWeek';\nimport { isSaturday } from 'date-fns/isSaturday';\nimport { isSunday } from 'date-fns/isSunday';\nimport { isToday } from 'date-fns/isToday';\nimport { isWithinInterval as isWithinRange } from 'date-fns/isWithinInterval';\nimport { lastDayOfMonth } from 'date-fns/lastDayOfMonth';\nimport { parseISO } from 'date-fns/parseISO';\nimport { setMonth } from 'date-fns/setMonth';\nimport { setYear } from 'date-fns/setYear';\nimport { startOfDay } from 'date-fns/startOfDay';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nconst ONE_MINUTE_IN_MS = 60 * 1000;\nconst ONE_HOUR_IN_MS = 60 * ONE_MINUTE_IN_MS;\n\n// TODO: Update to use date-fns functions.\n// see: https://github.com/date-fns/date-fns/issues/571 and https://bugs.webkit.org/show_bug.cgi?id=188001\n//\n// Safari has a problem with DST when the transition occurrs during midnight. To test set your timezone\n// to BRT (Brasilia) and type new Date(2018, 10, 4) on Safari's console.\n// It will return `Nov 03 2018 23:00:00` whereas Chrome and Firefox return `Nov 04 2018 01:00:00`.\n//\n// To go aroud this problem we're mostly avoiding date objects and using UTC when that's not\n// possible.\n\nfunction utc(year, month, date) {\n  return new Date(Date.UTC(year, month, date));\n}\nfunction daysInMonth(year, month) {\n  // Gets the last day of the month specified\n  return new Date(year, month + 1, 0).getDate();\n}\nfunction dateAtStartOfDay(year, month, day) {\n  const date = utc(year, month, day);\n  const tzOffset = date.getTimezoneOffset();\n\n  // Date is utc so we add/subtract the timezone hours.\n  // Using setTime is consistent on every browser so we have the same result everywhere.\n  date.setTime(date.getTime() + tzOffset * ONE_MINUTE_IN_MS);\n\n  // Bug in Safari that only occurs when the transition from/to DST is during midnight (e.g. Brazil and Chile).\n  // We want the exact day provided in the arguments so we adjust accordingly.\n  if (day !== date.getDate() && date.getHours() === 23) {\n    date.setTime(date.getTime() + ONE_HOUR_IN_MS);\n  }\n  return date;\n}\nfunction addDay(year, month, day) {\n  const date = utc(year, month, day);\n  date.setUTCDate(date.getUTCDate() + 1);\n  return [date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()];\n}\nfunction startOfWeek(year, month, day, weekStartsOn) {\n  const date = utc(year, month, day);\n  const weekDay = date.getUTCDay();\n  const diff = (weekDay < weekStartsOn ? 7 : 0) + weekDay - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  return [date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()];\n}\nfunction getCalendarMonthWeeks(date, weekStartsOn) {\n  let [year, month, day] = startOfWeek(date.getFullYear(), date.getMonth(), 1, weekStartsOn);\n  const weeksInMonth = [];\n  for (let i = 0; i < 6; i += 1) {\n    const currWeek = [];\n    for (let j = 0; j < 7; j += 1) {\n      currWeek.push(dateAtStartOfDay(year, month, day));\n      [year, month, day] = addDay(year, month, day);\n    }\n    weeksInMonth.push(currWeek);\n  }\n  return weeksInMonth;\n}\nfunction getLastDayOfWeekend(daysOfWeek) {\n  const weekend = daysOfWeek.map(day => day.isWeekend);\n  if (weekend[0] && weekend[6]) {\n    // weekend stretches over turn the of the week\n    return daysOfWeek[weekend.indexOf(false) - 1].index;\n  }\n  return daysOfWeek[weekend.lastIndexOf(true)].index;\n}\nfunction getFirstDayOfWeekend(daysOfWeek) {\n  const weekend = daysOfWeek.map(day => day.isWeekend);\n  if (weekend[0] && weekend[6]) {\n    // weekend stretches over turn the of the week\n    return daysOfWeek[weekend.lastIndexOf(false) + 1].index;\n  }\n  return daysOfWeek[weekend.indexOf(true)].index;\n}\nconst orderDaysOfWeek = (daysOfWeek, weekStartsOn) => {\n  // Sorted in [sun, mon, ..., sat]\n  const sortedDaysOfWeek = daysOfWeek.slice().sort((a, b) => a.index - b.index);\n  // Ordered according to weekStartsOn, e.g. [mon, tue, ..., sun]\n  return [...sortedDaysOfWeek.slice(weekStartsOn), ...sortedDaysOfWeek.slice(0, weekStartsOn)];\n};\n\n/* Takes arbitrary dates and returns the beginning of the first and enf of the last month containing these dates  */\nfunction getMonthRange(from, to) {\n  return {\n    min: startOfMonth(from),\n    max: endOfMonth(to)\n  };\n}\nfunction getMonthsInRange(from, to) {\n  const {\n    max,\n    min\n  } = getMonthRange(from, to);\n  let currentMonth = startOfMonth(from);\n  const monthsInRange = [];\n  while (isWithinRange(currentMonth, {\n    start: min,\n    end: max\n  })) {\n    monthsInRange.push(currentMonth);\n    currentMonth = addMonths(currentMonth, 1);\n  }\n  return monthsInRange;\n}\n\n/*\nAdjusts a date, if necessary, to fit within a range.\nIf date passed in is null, it'll return the minimum date.\n*/\nconst dateToBoundaries = (date, minDate, maxDate) => {\n  if (!date) {\n    return minDate;\n  }\n  if (isWithinRange(date, {\n    start: minDate,\n    end: maxDate\n  })) {\n    return date;\n  }\n  if (isBefore(date, minDate)) {\n    return minDate;\n  }\n  return maxDate;\n};\nconst setMonthYear = (date, newMonth, newYear) => {\n  const dateToUse = date || new Date(newYear, newMonth, 1);\n  return setYear(setMonth(dateToUse, newMonth), newYear);\n};\nconst parseIsoDate = parseISO;\nconst formatIsoDate = date => format(date, 'yyyy-MM-dd');\nconst formatIsoMonth = date => format(date, 'yyyy-MM');\nexport { getCalendarMonthWeeks, getFirstDayOfWeekend, getLastDayOfWeekend, getMonthsInRange, getMonthRange, getDay, dateToBoundaries, isWithinRange, isSaturday, isSunday, isToday, isSameDay, isSameWeek, isSameMonth, isBefore, isAfter, differenceInCalendarMonths, addMonths, addDays, orderDaysOfWeek, setMonthYear, startOfMonth, lastDayOfMonth, startOfDay, format, daysInMonth, formatIsoDate, formatIsoMonth, parseIsoDate, endOfMonth };","map":{"version":3,"names":["addDays","addMonths","differenceInCalendarMonths","endOfMonth","format","getDay","isAfter","isBefore","isSameDay","isSameMonth","isSameWeek","isSaturday","isSunday","isToday","isWithinInterval","isWithinRange","lastDayOfMonth","parseISO","setMonth","setYear","startOfDay","startOfMonth","ONE_MINUTE_IN_MS","ONE_HOUR_IN_MS","utc","year","month","date","Date","UTC","daysInMonth","getDate","dateAtStartOfDay","day","tzOffset","getTimezoneOffset","setTime","getTime","getHours","addDay","setUTCDate","getUTCDate","getUTCFullYear","getUTCMonth","startOfWeek","weekStartsOn","weekDay","getUTCDay","diff","getCalendarMonthWeeks","getFullYear","getMonth","weeksInMonth","i","currWeek","j","push","getLastDayOfWeekend","daysOfWeek","weekend","map","isWeekend","indexOf","index","lastIndexOf","getFirstDayOfWeekend","orderDaysOfWeek","sortedDaysOfWeek","slice","sort","a","b","getMonthRange","from","to","min","max","getMonthsInRange","currentMonth","monthsInRange","start","end","dateToBoundaries","minDate","maxDate","setMonthYear","newMonth","newYear","dateToUse","parseIsoDate","formatIsoDate","formatIsoMonth"],"sources":["C:/Users/Dell/my-app/node_modules/@skyscanner/backpack-web/bpk-component-calendar/src/date-utils.js"],"sourcesContent":["/*\n * Backpack - Skyscanner's Design System\n *\n * Copyright 2016 Skyscanner Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addDays } from 'date-fns/addDays';\nimport { addMonths } from 'date-fns/addMonths';\nimport { differenceInCalendarMonths } from 'date-fns/differenceInCalendarMonths';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { format } from 'date-fns/format';\nimport { getDay } from 'date-fns/getDay';\nimport { isAfter } from 'date-fns/isAfter';\nimport { isBefore } from 'date-fns/isBefore';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isSameWeek } from 'date-fns/isSameWeek';\nimport { isSaturday } from 'date-fns/isSaturday';\nimport { isSunday } from 'date-fns/isSunday';\nimport { isToday } from 'date-fns/isToday';\nimport { isWithinInterval as isWithinRange } from 'date-fns/isWithinInterval';\nimport { lastDayOfMonth } from 'date-fns/lastDayOfMonth';\nimport { parseISO } from 'date-fns/parseISO';\nimport { setMonth } from 'date-fns/setMonth';\nimport { setYear } from 'date-fns/setYear';\nimport { startOfDay } from 'date-fns/startOfDay';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nconst ONE_MINUTE_IN_MS = 60 * 1000;\nconst ONE_HOUR_IN_MS = 60 * ONE_MINUTE_IN_MS;\n\n// TODO: Update to use date-fns functions.\n// see: https://github.com/date-fns/date-fns/issues/571 and https://bugs.webkit.org/show_bug.cgi?id=188001\n//\n// Safari has a problem with DST when the transition occurrs during midnight. To test set your timezone\n// to BRT (Brasilia) and type new Date(2018, 10, 4) on Safari's console.\n// It will return `Nov 03 2018 23:00:00` whereas Chrome and Firefox return `Nov 04 2018 01:00:00`.\n//\n// To go aroud this problem we're mostly avoiding date objects and using UTC when that's not\n// possible.\n\nfunction utc(year, month, date) {\n  return new Date(Date.UTC(year, month, date));\n}\nfunction daysInMonth(year, month) {\n  // Gets the last day of the month specified\n  return new Date(year, month + 1, 0).getDate();\n}\nfunction dateAtStartOfDay(year, month, day) {\n  const date = utc(year, month, day);\n  const tzOffset = date.getTimezoneOffset();\n\n  // Date is utc so we add/subtract the timezone hours.\n  // Using setTime is consistent on every browser so we have the same result everywhere.\n  date.setTime(date.getTime() + tzOffset * ONE_MINUTE_IN_MS);\n\n  // Bug in Safari that only occurs when the transition from/to DST is during midnight (e.g. Brazil and Chile).\n  // We want the exact day provided in the arguments so we adjust accordingly.\n  if (day !== date.getDate() && date.getHours() === 23) {\n    date.setTime(date.getTime() + ONE_HOUR_IN_MS);\n  }\n  return date;\n}\nfunction addDay(year, month, day) {\n  const date = utc(year, month, day);\n  date.setUTCDate(date.getUTCDate() + 1);\n  return [date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()];\n}\nfunction startOfWeek(year, month, day, weekStartsOn) {\n  const date = utc(year, month, day);\n  const weekDay = date.getUTCDay();\n  const diff = (weekDay < weekStartsOn ? 7 : 0) + weekDay - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  return [date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()];\n}\nfunction getCalendarMonthWeeks(date, weekStartsOn) {\n  let [year, month, day] = startOfWeek(date.getFullYear(), date.getMonth(), 1, weekStartsOn);\n  const weeksInMonth = [];\n  for (let i = 0; i < 6; i += 1) {\n    const currWeek = [];\n    for (let j = 0; j < 7; j += 1) {\n      currWeek.push(dateAtStartOfDay(year, month, day));\n      [year, month, day] = addDay(year, month, day);\n    }\n    weeksInMonth.push(currWeek);\n  }\n  return weeksInMonth;\n}\nfunction getLastDayOfWeekend(daysOfWeek) {\n  const weekend = daysOfWeek.map(day => day.isWeekend);\n  if (weekend[0] && weekend[6]) {\n    // weekend stretches over turn the of the week\n    return daysOfWeek[weekend.indexOf(false) - 1].index;\n  }\n  return daysOfWeek[weekend.lastIndexOf(true)].index;\n}\nfunction getFirstDayOfWeekend(daysOfWeek) {\n  const weekend = daysOfWeek.map(day => day.isWeekend);\n  if (weekend[0] && weekend[6]) {\n    // weekend stretches over turn the of the week\n    return daysOfWeek[weekend.lastIndexOf(false) + 1].index;\n  }\n  return daysOfWeek[weekend.indexOf(true)].index;\n}\nconst orderDaysOfWeek = (daysOfWeek, weekStartsOn) => {\n  // Sorted in [sun, mon, ..., sat]\n  const sortedDaysOfWeek = daysOfWeek.slice().sort((a, b) => a.index - b.index);\n  // Ordered according to weekStartsOn, e.g. [mon, tue, ..., sun]\n  return [...sortedDaysOfWeek.slice(weekStartsOn), ...sortedDaysOfWeek.slice(0, weekStartsOn)];\n};\n\n/* Takes arbitrary dates and returns the beginning of the first and enf of the last month containing these dates  */\nfunction getMonthRange(from, to) {\n  return {\n    min: startOfMonth(from),\n    max: endOfMonth(to)\n  };\n}\nfunction getMonthsInRange(from, to) {\n  const {\n    max,\n    min\n  } = getMonthRange(from, to);\n  let currentMonth = startOfMonth(from);\n  const monthsInRange = [];\n  while (isWithinRange(currentMonth, {\n    start: min,\n    end: max\n  })) {\n    monthsInRange.push(currentMonth);\n    currentMonth = addMonths(currentMonth, 1);\n  }\n  return monthsInRange;\n}\n\n/*\nAdjusts a date, if necessary, to fit within a range.\nIf date passed in is null, it'll return the minimum date.\n*/\nconst dateToBoundaries = (date, minDate, maxDate) => {\n  if (!date) {\n    return minDate;\n  }\n  if (isWithinRange(date, {\n    start: minDate,\n    end: maxDate\n  })) {\n    return date;\n  }\n  if (isBefore(date, minDate)) {\n    return minDate;\n  }\n  return maxDate;\n};\nconst setMonthYear = (date, newMonth, newYear) => {\n  const dateToUse = date || new Date(newYear, newMonth, 1);\n  return setYear(setMonth(dateToUse, newMonth), newYear);\n};\nconst parseIsoDate = parseISO;\nconst formatIsoDate = date => format(date, 'yyyy-MM-dd');\nconst formatIsoMonth = date => format(date, 'yyyy-MM');\nexport { getCalendarMonthWeeks, getFirstDayOfWeekend, getLastDayOfWeekend, getMonthsInRange, getMonthRange, getDay, dateToBoundaries, isWithinRange, isSaturday, isSunday, isToday, isSameDay, isSameWeek, isSameMonth, isBefore, isAfter, differenceInCalendarMonths, addMonths, addDays, orderDaysOfWeek, setMonthYear, startOfMonth, lastDayOfMonth, startOfDay, format, daysInMonth, formatIsoDate, formatIsoMonth, parseIsoDate, endOfMonth };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,0BAA0B,QAAQ,qCAAqC;AAChF,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,gBAAgB,IAAIC,aAAa,QAAQ,2BAA2B;AAC7E,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,YAAY,QAAQ,uBAAuB;AACpD,MAAMC,gBAAgB,GAAG,EAAE,GAAG,IAAI;AAClC,MAAMC,cAAc,GAAG,EAAE,GAAGD,gBAAgB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASE,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC9B,OAAO,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAACJ,IAAI,EAAEC,KAAK,EAAEC,IAAI,CAAC,CAAC;AAC9C;AACA,SAASG,WAAWA,CAACL,IAAI,EAAEC,KAAK,EAAE;EAChC;EACA,OAAO,IAAIE,IAAI,CAACH,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC;AAC/C;AACA,SAASC,gBAAgBA,CAACP,IAAI,EAAEC,KAAK,EAAEO,GAAG,EAAE;EAC1C,MAAMN,IAAI,GAAGH,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEO,GAAG,CAAC;EAClC,MAAMC,QAAQ,GAAGP,IAAI,CAACQ,iBAAiB,CAAC,CAAC;;EAEzC;EACA;EACAR,IAAI,CAACS,OAAO,CAACT,IAAI,CAACU,OAAO,CAAC,CAAC,GAAGH,QAAQ,GAAGZ,gBAAgB,CAAC;;EAE1D;EACA;EACA,IAAIW,GAAG,KAAKN,IAAI,CAACI,OAAO,CAAC,CAAC,IAAIJ,IAAI,CAACW,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE;IACpDX,IAAI,CAACS,OAAO,CAACT,IAAI,CAACU,OAAO,CAAC,CAAC,GAAGd,cAAc,CAAC;EAC/C;EACA,OAAOI,IAAI;AACb;AACA,SAASY,MAAMA,CAACd,IAAI,EAAEC,KAAK,EAAEO,GAAG,EAAE;EAChC,MAAMN,IAAI,GAAGH,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEO,GAAG,CAAC;EAClCN,IAAI,CAACa,UAAU,CAACb,IAAI,CAACc,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;EACtC,OAAO,CAACd,IAAI,CAACe,cAAc,CAAC,CAAC,EAAEf,IAAI,CAACgB,WAAW,CAAC,CAAC,EAAEhB,IAAI,CAACc,UAAU,CAAC,CAAC,CAAC;AACvE;AACA,SAASG,WAAWA,CAACnB,IAAI,EAAEC,KAAK,EAAEO,GAAG,EAAEY,YAAY,EAAE;EACnD,MAAMlB,IAAI,GAAGH,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEO,GAAG,CAAC;EAClC,MAAMa,OAAO,GAAGnB,IAAI,CAACoB,SAAS,CAAC,CAAC;EAChC,MAAMC,IAAI,GAAG,CAACF,OAAO,GAAGD,YAAY,GAAG,CAAC,GAAG,CAAC,IAAIC,OAAO,GAAGD,YAAY;EACtElB,IAAI,CAACa,UAAU,CAACb,IAAI,CAACc,UAAU,CAAC,CAAC,GAAGO,IAAI,CAAC;EACzC,OAAO,CAACrB,IAAI,CAACe,cAAc,CAAC,CAAC,EAAEf,IAAI,CAACgB,WAAW,CAAC,CAAC,EAAEhB,IAAI,CAACc,UAAU,CAAC,CAAC,CAAC;AACvE;AACA,SAASQ,qBAAqBA,CAACtB,IAAI,EAAEkB,YAAY,EAAE;EACjD,IAAI,CAACpB,IAAI,EAAEC,KAAK,EAAEO,GAAG,CAAC,GAAGW,WAAW,CAACjB,IAAI,CAACuB,WAAW,CAAC,CAAC,EAAEvB,IAAI,CAACwB,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEN,YAAY,CAAC;EAC1F,MAAMO,YAAY,GAAG,EAAE;EACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC7B,MAAMC,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;MAC7BD,QAAQ,CAACE,IAAI,CAACxB,gBAAgB,CAACP,IAAI,EAAEC,KAAK,EAAEO,GAAG,CAAC,CAAC;MACjD,CAACR,IAAI,EAAEC,KAAK,EAAEO,GAAG,CAAC,GAAGM,MAAM,CAACd,IAAI,EAAEC,KAAK,EAAEO,GAAG,CAAC;IAC/C;IACAmB,YAAY,CAACI,IAAI,CAACF,QAAQ,CAAC;EAC7B;EACA,OAAOF,YAAY;AACrB;AACA,SAASK,mBAAmBA,CAACC,UAAU,EAAE;EACvC,MAAMC,OAAO,GAAGD,UAAU,CAACE,GAAG,CAAC3B,GAAG,IAAIA,GAAG,CAAC4B,SAAS,CAAC;EACpD,IAAIF,OAAO,CAAC,CAAC,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,EAAE;IAC5B;IACA,OAAOD,UAAU,CAACC,OAAO,CAACG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAACC,KAAK;EACrD;EACA,OAAOL,UAAU,CAACC,OAAO,CAACK,WAAW,CAAC,IAAI,CAAC,CAAC,CAACD,KAAK;AACpD;AACA,SAASE,oBAAoBA,CAACP,UAAU,EAAE;EACxC,MAAMC,OAAO,GAAGD,UAAU,CAACE,GAAG,CAAC3B,GAAG,IAAIA,GAAG,CAAC4B,SAAS,CAAC;EACpD,IAAIF,OAAO,CAAC,CAAC,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,EAAE;IAC5B;IACA,OAAOD,UAAU,CAACC,OAAO,CAACK,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAACD,KAAK;EACzD;EACA,OAAOL,UAAU,CAACC,OAAO,CAACG,OAAO,CAAC,IAAI,CAAC,CAAC,CAACC,KAAK;AAChD;AACA,MAAMG,eAAe,GAAGA,CAACR,UAAU,EAAEb,YAAY,KAAK;EACpD;EACA,MAAMsB,gBAAgB,GAAGT,UAAU,CAACU,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACP,KAAK,GAAGQ,CAAC,CAACR,KAAK,CAAC;EAC7E;EACA,OAAO,CAAC,GAAGI,gBAAgB,CAACC,KAAK,CAACvB,YAAY,CAAC,EAAE,GAAGsB,gBAAgB,CAACC,KAAK,CAAC,CAAC,EAAEvB,YAAY,CAAC,CAAC;AAC9F,CAAC;;AAED;AACA,SAAS2B,aAAaA,CAACC,IAAI,EAAEC,EAAE,EAAE;EAC/B,OAAO;IACLC,GAAG,EAAEtD,YAAY,CAACoD,IAAI,CAAC;IACvBG,GAAG,EAAEzE,UAAU,CAACuE,EAAE;EACpB,CAAC;AACH;AACA,SAASG,gBAAgBA,CAACJ,IAAI,EAAEC,EAAE,EAAE;EAClC,MAAM;IACJE,GAAG;IACHD;EACF,CAAC,GAAGH,aAAa,CAACC,IAAI,EAAEC,EAAE,CAAC;EAC3B,IAAII,YAAY,GAAGzD,YAAY,CAACoD,IAAI,CAAC;EACrC,MAAMM,aAAa,GAAG,EAAE;EACxB,OAAOhE,aAAa,CAAC+D,YAAY,EAAE;IACjCE,KAAK,EAAEL,GAAG;IACVM,GAAG,EAAEL;EACP,CAAC,CAAC,EAAE;IACFG,aAAa,CAACvB,IAAI,CAACsB,YAAY,CAAC;IAChCA,YAAY,GAAG7E,SAAS,CAAC6E,YAAY,EAAE,CAAC,CAAC;EAC3C;EACA,OAAOC,aAAa;AACtB;;AAEA;AACA;AACA;AACA;AACA,MAAMG,gBAAgB,GAAGA,CAACvD,IAAI,EAAEwD,OAAO,EAAEC,OAAO,KAAK;EACnD,IAAI,CAACzD,IAAI,EAAE;IACT,OAAOwD,OAAO;EAChB;EACA,IAAIpE,aAAa,CAACY,IAAI,EAAE;IACtBqD,KAAK,EAAEG,OAAO;IACdF,GAAG,EAAEG;EACP,CAAC,CAAC,EAAE;IACF,OAAOzD,IAAI;EACb;EACA,IAAIpB,QAAQ,CAACoB,IAAI,EAAEwD,OAAO,CAAC,EAAE;IAC3B,OAAOA,OAAO;EAChB;EACA,OAAOC,OAAO;AAChB,CAAC;AACD,MAAMC,YAAY,GAAGA,CAAC1D,IAAI,EAAE2D,QAAQ,EAAEC,OAAO,KAAK;EAChD,MAAMC,SAAS,GAAG7D,IAAI,IAAI,IAAIC,IAAI,CAAC2D,OAAO,EAAED,QAAQ,EAAE,CAAC,CAAC;EACxD,OAAOnE,OAAO,CAACD,QAAQ,CAACsE,SAAS,EAAEF,QAAQ,CAAC,EAAEC,OAAO,CAAC;AACxD,CAAC;AACD,MAAME,YAAY,GAAGxE,QAAQ;AAC7B,MAAMyE,aAAa,GAAG/D,IAAI,IAAIvB,MAAM,CAACuB,IAAI,EAAE,YAAY,CAAC;AACxD,MAAMgE,cAAc,GAAGhE,IAAI,IAAIvB,MAAM,CAACuB,IAAI,EAAE,SAAS,CAAC;AACtD,SAASsB,qBAAqB,EAAEgB,oBAAoB,EAAER,mBAAmB,EAAEoB,gBAAgB,EAAEL,aAAa,EAAEnE,MAAM,EAAE6E,gBAAgB,EAAEnE,aAAa,EAAEJ,UAAU,EAAEC,QAAQ,EAAEC,OAAO,EAAEL,SAAS,EAAEE,UAAU,EAAED,WAAW,EAAEF,QAAQ,EAAED,OAAO,EAAEJ,0BAA0B,EAAED,SAAS,EAAED,OAAO,EAAEkE,eAAe,EAAEmB,YAAY,EAAEhE,YAAY,EAAEL,cAAc,EAAEI,UAAU,EAAEhB,MAAM,EAAE0B,WAAW,EAAE4D,aAAa,EAAEC,cAAc,EAAEF,YAAY,EAAEtF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}