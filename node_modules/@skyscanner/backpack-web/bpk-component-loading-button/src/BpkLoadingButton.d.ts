import PropTypes from 'prop-types';
import type { ReactElement, ReactNode } from 'react';
export declare const ICON_POSITION: {
    LEADING: string;
    TRAILING: string;
};
type LoadingProps = {
    featured?: boolean;
    secondaryOnDark?: boolean;
    primaryOnLight?: boolean;
    primaryOnDark?: boolean;
    children: ReactNode;
    className?: string;
    disabled?: boolean;
    secondary?: boolean;
    destructive?: boolean;
    large?: boolean;
    link?: boolean;
    linkOnDark?: boolean;
    loading: boolean;
    iconOnly: boolean;
    icon?: ReactElement<any>;
    iconPosition: string;
    iconDisabled?: ReactElement<any>;
    iconLoading?: ReactElement<any>;
};
declare const BpkLoadingButton: {
    (props: LoadingProps): JSX.Element;
    propTypes: {
        children: PropTypes.Validator<NonNullable<PropTypes.ReactNodeLike>>;
        className: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        secondary: PropTypes.Requireable<boolean>;
        destructive: PropTypes.Requireable<boolean>;
        link: PropTypes.Requireable<boolean>;
        linkOnDark: PropTypes.Requireable<boolean>;
        loading: PropTypes.Requireable<boolean>;
        iconOnly: PropTypes.Requireable<boolean>;
        icon: PropTypes.Requireable<PropTypes.ReactElementLike>;
        iconPosition: PropTypes.Requireable<string>;
        iconDisabled: PropTypes.Requireable<PropTypes.ReactElementLike>;
        iconLoading: PropTypes.Requireable<PropTypes.ReactElementLike>;
    };
    defaultProps: {
        className: null;
        disabled: boolean;
        secondary: boolean;
        destructive: boolean;
        large: boolean;
        link: boolean;
        linkOnDark: boolean;
        loading: boolean;
        iconOnly: boolean;
        icon: null;
        iconPosition: string;
        iconDisabled: null;
        iconLoading: null;
    };
};
export default BpkLoadingButton;
