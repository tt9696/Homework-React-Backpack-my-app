/// <reference types="react" />
import { type Props } from './common-types';
export declare const BUTTON_TYPES: {
    readonly primary: "primary";
    readonly primaryOnDark: "primary-on-dark";
    readonly primaryOnLight: "primary-on-light";
    readonly secondary: "secondary";
    readonly secondaryOnDark: "secondary-on-dark";
    readonly destructive: "destructive";
    readonly featured: "featured";
    readonly link: "link";
    readonly linkOnDark: "link-on-dark";
};
type ValueOf<T> = T[keyof T];
declare const BpkButtonBase: {
    (props: Props & {
        type?: ValueOf<{
            readonly primary: "primary";
            readonly primaryOnDark: "primary-on-dark";
            readonly primaryOnLight: "primary-on-light";
            readonly secondary: "secondary";
            readonly secondaryOnDark: "secondary-on-dark";
            readonly destructive: "destructive";
            readonly featured: "featured";
            readonly link: "link";
            readonly linkOnDark: "link-on-dark";
        }> | undefined;
    }): JSX.Element;
    propTypes: {
        children: import("prop-types").Validator<NonNullable<import("prop-types").ReactNodeLike>>;
        href: import("prop-types").Requireable<string>;
        className: import("prop-types").Requireable<string>;
        disabled: import("prop-types").Requireable<boolean>;
        onClick: import("prop-types").Requireable<(...args: any[]) => any>;
        submit: import("prop-types").Requireable<boolean>;
        large: import("prop-types").Requireable<boolean>;
        iconOnly: import("prop-types").Requireable<boolean>;
        blank: import("prop-types").Requireable<boolean>;
        rel: import("prop-types").Requireable<string>;
    };
    defaultProps: {
        href: null;
        className: null;
        disabled: boolean;
        onClick: null;
        submit: boolean;
        large: boolean;
        iconOnly: boolean;
        blank: boolean;
        rel: null;
    };
};
export default BpkButtonBase;
