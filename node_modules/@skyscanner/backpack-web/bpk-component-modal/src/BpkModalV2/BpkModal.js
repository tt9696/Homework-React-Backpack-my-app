/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2016 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useEffect, useRef } from 'react';

// @ts-expect-error Untyped import. See `decisions/imports-ts-suppressions.md`.
import BpkCloseButton from "../../../bpk-component-close-button";
import BpkText, { TEXT_STYLES } from "../../../bpk-component-text";
import { cssModules, withDefaultProps } from "../../../bpk-react-utils";
import { MODAL_STYLING } from "../BpkModalInner";
import STYLES from "./BpKModal.module.css";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const getClassName = cssModules(STYLES);
const Header = ({
  closeLabel,
  id,
  modalStyle,
  onClose,
  title
}) => {
  if (title) {
    return /*#__PURE__*/_jsxs("div", {
      id: id,
      className: [getClassName('bpk-modal__header-title'), getClassName(`bpk-modal__header-title-style--${modalStyle}`)].join(' '),
      children: [/*#__PURE__*/_jsx("div", {
        className: getClassName('bpk-modal__header-title-container'),
        children: /*#__PURE__*/_jsx(Heading, {
          children: title
        })
      }), /*#__PURE__*/_jsx(BpkCloseButton, {
        label: closeLabel,
        onClick: onClose,
        onDark: modalStyle === MODAL_STYLING.surfaceContrast
      })]
    });
  }
  return /*#__PURE__*/_jsx("div", {
    className: [getClassName('bpk-modal__button-container'), getClassName(`bpk-modal__button-container-style--${modalStyle}`)].join(' '),
    children: /*#__PURE__*/_jsx(BpkCloseButton, {
      onDark: modalStyle === MODAL_STYLING.surfaceContrast,
      label: closeLabel,
      onClick: onClose
    })
  });
};
const Heading = withDefaultProps(BpkText, {
  textStyle: TEXT_STYLES.label1,
  tagName: 'h2'
});
// TODO: this check if the browser support the HTML dialog element. We can remove it once we drop support as a business for Safari 14
const dialogSupported = typeof HTMLDialogElement === 'function';
const setPageProperties = ({
  isDialogOpen
}) => {
  document.body.style.overflowY = isDialogOpen ? 'hidden' : 'visible';
  if (!dialogSupported) {
    document.body.style.position = isDialogOpen ? 'fixed' : 'relative';
    document.body.style.width = isDialogOpen ? '100%' : 'auto';
  }
};
export const BpkModalV2 = props => {
  const {
    ariaLabelledby,
    children,
    closeLabel,
    fullScreenOnDesktop,
    id,
    isOpen,
    modalStyle = MODAL_STYLING.default,
    noFullScreenOnMobile,
    onClose,
    padded,
    showHeader = true,
    title,
    wide
  } = props;
  const ref = useRef(null);
  useEffect(() => {
    const dialog = document.getElementById(`${id}`);
    const dialogWithPolyfill = document.getElementById(`${id}-polyfill`);
    const handleBackdropClick = modal => {
      if (modal) {
        modal.addEventListener('click', event => {
          const {
            target
          } = event;
          if (target === modal) {
            modal === dialog ? ref.current?.close?.() : onClose();
          }
        });
      }
    };
    const handleKeyDown = event => {
      if (event.key === 'Escape') {
        onClose();
      }
    };
    if (isOpen) {
      // There is a bug on older versions of browser using chromium (chrome, firefox, edge >114) where the dialog got an open attribute even before it is opened.
      // Therefore, when trying to open it, it crashes and log an error mentioning the dialog has already an open attribute.
      ref.current?.removeAttribute('open');
      ref.current?.showModal?.();
      if (dialogWithPolyfill) {
        handleBackdropClick(dialogWithPolyfill);
        window.addEventListener('keydown', handleKeyDown);
      }
      handleBackdropClick(dialog);
    } else {
      ref.current?.close?.();
    }
    setPageProperties({
      isDialogOpen: isOpen
    });
    return () => {
      setPageProperties({
        isDialogOpen: false
      });
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [id, isOpen, onClose]);
  const classNames = getClassName('bpk-modal', fullScreenOnDesktop && 'bpk-modal--full-screen-desktop', noFullScreenOnMobile && 'bpk-modal--no-full-screen-mobile', wide && 'bpk-modal--wide');
  const contentClassNames = getClassName('bpk-modal__container', fullScreenOnDesktop && 'bpk-modal__container--full-screen-desktop', padded && 'bpk-modal__container--padded', modalStyle === MODAL_STYLING.surfaceContrast && 'bpk-modal__container--surface-contrast');
  return isOpen ? /*#__PURE__*/_jsxs("div", {
    className: getClassName('bpk-modal-wrapper', dialogSupported ? '' : 'bpk-modal-polyfill'),
    children: [!dialogSupported && /*#__PURE__*/_jsx("div", {
      id: `${id}-polyfill`,
      className: getClassName('bpk-modal-backdrop'),
      "data-open": isOpen
    }), /*#__PURE__*/_jsxs("dialog", {
      id: id,
      className: classNames,
      onClose: onClose,
      "aria-labelledby": ariaLabelledby,
      "data-open": isOpen,
      ref: ref,
      children: [showHeader && /*#__PURE__*/_jsx(Header, {
        id: `${id}-title`,
        title: title,
        closeLabel: closeLabel,
        onClose: onClose,
        modalStyle: modalStyle
      }), /*#__PURE__*/_jsx("div", {
        className: contentClassNames,
        children: children
      })]
    })]
  }) : null;
};