/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2016 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This is an internal component to Backpack that powers `BpkInfoBanner`,
 * `BpkInfoBannerDismissable` and `BpkInfoBannerExpandable`.
 */

import { durationSm } from '@skyscanner/bpk-foundations-web/tokens/base.es6';

// @ts-expect-error Untyped import. See `decisions/imports-ts-suppressions.md`.
import BpkAnimateHeight from "../../bpk-animate-height";
// @ts-expect-error Untyped import. See `decisions/imports-ts-suppressions.md`.
import BpkCloseButton from "../../bpk-component-close-button";
import { withButtonAlignment } from "../../bpk-component-icon";
import ChevronDownIcon from "../../bpk-component-icon/sm/chevron-down";
import ChevronUpIcon from "../../bpk-component-icon/sm/chevron-up";
import InfoCircleIcon from "../../bpk-component-icon/sm/information-circle";
import TickCircleIcon from "../../bpk-component-icon/sm/tick-circle";
// @ts-expect-error Untyped import. See `decisions/imports-ts-suppressions.md`.
import BpkLink from "../../bpk-component-link";
import { cssModules } from "../../bpk-react-utils";
import AnimateAndFade from "./AnimateAndFade";
import { ALERT_TYPES, STYLE_TYPES } from "./common-types";
import STYLES from "./BpkInfoBanner.module.css";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const getClassName = cssModules(STYLES);
const ExpandIcon = withButtonAlignment(ChevronDownIcon);
const CollapseIcon = withButtonAlignment(ChevronUpIcon);
export const CONFIGURATION = {
  NONE: 'none',
  DISMISSABLE: 'dismissable',
  EXPANDABLE: 'expandable'
};
const getIconForType = (type, CustomIcon) => {
  const classMap = {
    [ALERT_TYPES.SUCCESS]: getClassName('bpk-info-banner__success-icon'),
    [ALERT_TYPES.WARNING]: getClassName('bpk-info-banner__warning-icon'),
    [ALERT_TYPES.ERROR]: getClassName('bpk-info-banner__error-icon'),
    [ALERT_TYPES.INFO]: getClassName('bpk-info-banner__info-icon')
  };
  const className = classMap[type];
  const componentMap = {
    [ALERT_TYPES.SUCCESS]: TickCircleIcon,
    [ALERT_TYPES.WARNING]: InfoCircleIcon,
    [ALERT_TYPES.ERROR]: InfoCircleIcon,
    [ALERT_TYPES.INFO]: InfoCircleIcon
  };
  const Icon = CustomIcon || componentMap[type];
  const AlignedIcon = withButtonAlignment(Icon);
  return /*#__PURE__*/_jsx("div", {
    className: className,
    children: /*#__PURE__*/_jsx(AlignedIcon, {})
  });
};
const ToggleButton = props => {
  const classNames = getClassName('bpk-info-banner__expand-icon');
  return /*#__PURE__*/_jsx("button", {
    type: "button",
    className: getClassName('bpk-info-banner__toggle-button'),
    "aria-label": props.label,
    "aria-expanded": props.expanded,
    title: props.label,
    children: /*#__PURE__*/_jsx("div", {
      className: classNames,
      children: props.expanded ? /*#__PURE__*/_jsx(CollapseIcon, {}) : /*#__PURE__*/_jsx(ExpandIcon, {})
    })
  });
};
const BpkInfoBannerInner = ({
  action = null,
  animateOnEnter = false,
  animateOnLeave = false,
  bannerClassName,
  children = null,
  configuration,
  dismissButtonLabel = '',
  expanded = false,
  icon = null,
  message,
  onDismiss = null,
  onExpandToggle = null,
  show = true,
  style = STYLE_TYPES.DEFAULT,
  toggleButtonLabel = '',
  type = ALERT_TYPES.INFO,
  ...rest
}) => {
  const onBannerExpandToggle = () => {
    if (onExpandToggle) {
      onExpandToggle(!expanded);
    }
  };
  const onBannerDismiss = () => {
    if (onDismiss) {
      onDismiss();
    }
  };
  const isExpandable = configuration === CONFIGURATION.EXPANDABLE;
  const dismissable = configuration === CONFIGURATION.DISMISSABLE;
  const showChildren = isExpandable && expanded;
  const sectionClassNames = getClassName('bpk-info-banner', `bpk-info-banner--${type}`, `bpk-info-banner--style-${style}`, bannerClassName && bannerClassName);
  const headerClassNames = getClassName('bpk-info-banner__header', isExpandable && 'bpk-info-banner__header--expandable');
  const childrenContainerClassName = action && isExpandable ? getClassName('bpk-info-banner__children-container--with-action') : getClassName('bpk-info-banner__children-container--no-action');

  /* eslint-disable
    jsx-a11y/no-static-element-interactions,
    jsx-a11y/click-events-have-key-events,
    */
  // Disabling 'click-events-have-key-events and interactive-supports-focus' because header element is not focusable.
  // ToggleButton is focusable and works for this.
  return /*#__PURE__*/_jsx(AnimateAndFade, {
    animateOnEnter: animateOnEnter,
    animateOnLeave: dismissable || animateOnLeave,
    show: show,
    ...rest,
    children: /*#__PURE__*/_jsxs("section", {
      className: sectionClassNames,
      role: "presentation",
      children: [/*#__PURE__*/_jsxs("div", {
        role: isExpandable ? 'button' : undefined,
        className: headerClassNames,
        onClick: onBannerExpandToggle,
        children: [/*#__PURE__*/_jsx("span", {
          className: getClassName('bpk-info-banner__icon'),
          children: getIconForType(type, icon)
        }), /*#__PURE__*/_jsx("span", {
          className: getClassName('bpk-info-banner__message'),
          children: message
        }), isExpandable && /*#__PURE__*/_jsx("span", {
          className: getClassName('bpk-info-banner__toggle'),
          children: /*#__PURE__*/_jsx(ToggleButton, {
            expanded: expanded,
            label: toggleButtonLabel
          })
        }), dismissable && /*#__PURE__*/_jsx("span", {
          className: getClassName('bpk-info-banner__toggle'),
          children: /*#__PURE__*/_jsx(BpkCloseButton, {
            onClick: onBannerDismiss,
            "aria-label": dismissButtonLabel,
            label: dismissButtonLabel
          })
        })]
      }), /*#__PURE__*/_jsxs(BpkAnimateHeight, {
        duration: parseInt(durationSm, 10),
        height: showChildren ? 'auto' : 0,
        children: [/*#__PURE__*/_jsx("div", {
          className: childrenContainerClassName,
          children: children
        }), isExpandable && action && /*#__PURE__*/_jsx(BpkLink, {
          onClick: action.callback,
          children: action.title
        })]
      })]
    })
  });
  /* eslint-enable */
};
export default BpkInfoBannerInner;