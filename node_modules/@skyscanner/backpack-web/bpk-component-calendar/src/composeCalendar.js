/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2016 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { cssModules } from "../../bpk-react-utils";
import { CALENDAR_SELECTION_TYPE } from "./custom-proptypes";
import STYLES from "./BpkCalendar.module.css";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const getClassName = cssModules(STYLES);
const composeCalendar = (Nav, GridHeader, Grid, CalendarDate) => {
  const BpkCalendar = ({
    changeMonthLabel = null,
    className = null,
    customRowHeight,
    dateModifiers = {},
    dateProps = {},
    daysOfWeek,
    fixedWidth = true,
    focusedDate = null,
    formatDateFull,
    formatMonth,
    gridClassName = null,
    gridProps = {},
    headerProps = {},
    id,
    markOutsideDays = true,
    markToday = true,
    maxDate,
    minDate,
    month,
    navProps = {},
    nextMonthLabel = null,
    onDateClick = null,
    onDateKeyDown = null,
    onMonthChange = null,
    preventKeyboardFocus = false,
    previousMonthLabel = null,
    selectionConfiguration = {
      type: CALENDAR_SELECTION_TYPE.single,
      date: null
    },
    weekDayKey = 'nameAbbr',
    weekStartsOn
  }) => {
    const classNames = [getClassName('bpk-calendar')];
    if (className) {
      classNames.push(className);
    }
    if (fixedWidth) {
      classNames.push(getClassName('bpk-calendar--fixed'));
    }
    const headerClasses = [];
    // If the Nav is present add `bpk-calendar__header` which
    // adds spacing between the nav and header.
    if (Nav) {
      headerClasses.push(getClassName('bpk-calendar__header'));
    }
    const gridClasses = [];
    // If the GridHeader is not present add `bpk-calendar__grid` which
    // adds spacing between the nav and grid.
    if (!GridHeader && Nav) {
      gridClasses.push(getClassName('bpk-calendar__grid'));
    }
    if (gridClassName) {
      gridClasses.push(gridClassName);
    }
    return /*#__PURE__*/_jsxs("div", {
      className: classNames.join(' '),
      children: [Nav && /*#__PURE__*/_jsx(Nav, {
        changeMonthLabel: changeMonthLabel,
        formatMonth: formatMonth,
        id: `${id}__bpk_calendar_nav`,
        maxDate: maxDate,
        minDate: minDate,
        month: month,
        nextMonthLabel: nextMonthLabel,
        onMonthChange: onMonthChange,
        previousMonthLabel: previousMonthLabel,
        ...navProps
      }), GridHeader && /*#__PURE__*/_jsx(GridHeader, {
        daysOfWeek: daysOfWeek,
        weekStartsOn: weekStartsOn,
        weekDayKey: weekDayKey
        // TODO: className to be removed
        // eslint-disable-next-line @skyscanner/rules/forbid-component-props
        ,
        className: headerClasses.join(' '),
        ...headerProps
      }), /*#__PURE__*/_jsx(Grid, {
        DateComponent: CalendarDate,
        dateModifiers: dateModifiers,
        daysOfWeek: daysOfWeek,
        formatDateFull: formatDateFull,
        formatMonth: formatMonth,
        month: month,
        onDateClick: onDateClick,
        onDateKeyDown: onDateKeyDown,
        preventKeyboardFocus: preventKeyboardFocus,
        weekStartsOn: weekStartsOn,
        maxDate: maxDate,
        minDate: minDate,
        focusedDate: focusedDate,
        markToday: markToday,
        markOutsideDays: markOutsideDays
        // TODO: className to be removed
        // eslint-disable-next-line @skyscanner/rules/forbid-component-props
        ,
        className: gridClasses.join(' '),
        dateProps: dateProps,
        selectionConfiguration: selectionConfiguration,
        customRowHeight: customRowHeight,
        ...gridProps
      })]
    });
  };
  return BpkCalendar;
};
export default composeCalendar;