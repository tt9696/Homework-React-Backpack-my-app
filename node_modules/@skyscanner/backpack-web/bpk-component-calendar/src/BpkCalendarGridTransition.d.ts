import type { ComponentType, ElementType } from 'react';
import { Component } from 'react';
export type Props = InjectedCalendarGridTransitionProps & {
    className?: string | null;
    month?: Date;
    focusedDate?: Date | null;
    [rest: string]: any;
};
type InjectedCalendarGridTransitionProps = {
    TransitionComponent: ElementType;
};
type State = {
    isTransitioning: boolean;
    transitionValue: string;
    currentMonth?: Date | null;
    months: Date[];
};
declare class BpkCalendarGridTransition extends Component<Props, State> {
    isTransitionEndSupported: boolean;
    static defaultProps: {
        className: null;
        month: Date;
        focusedDate: null;
    };
    constructor(props: Props);
    UNSAFE_componentWillReceiveProps({ month: nextMonth }: Props): void;
    componentDidUpdate(): void;
    onMonthTransitionEnd(): void;
    render(): JSX.Element;
}
declare const addCalendarGridTransition: <P extends {}>(TransitionComponent: ComponentType<P>) => (props: Omit<P & Props, keyof InjectedCalendarGridTransitionProps>) => JSX.Element;
export default BpkCalendarGridTransition;
export { addCalendarGridTransition };
