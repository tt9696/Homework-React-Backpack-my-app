/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2016 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { textColors } from '@skyscanner/bpk-foundations-web/tokens/base.es6';
import BpkAriaLive from "../../bpk-component-aria-live";
import ArrowLeftIcon from "../../bpk-component-icon/lg/arrow-left";
import ArrowRightIcon from "../../bpk-component-icon/lg/arrow-right";
// @ts-expect-error Untyped import. See `decisions/imports-ts-suppressions.md`.
import BpkSelect from "../../bpk-component-select";
import { cssModules } from "../../bpk-react-utils";
import { addMonths, formatIsoMonth, getMonthRange, getMonthsInRange, isWithinRange, parseIsoDate, startOfMonth } from "./date-utils";
import STYLES from "./BpkCalendarNav.module.css";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const getClassName = cssModules(STYLES);
const changeMonth = ({
  callback,
  max,
  min,
  month,
  source
}) => event => {
  // Safeguard for disabled buttons is due to React bug in Chrome: https://github.com/facebook/react/issues/8308
  // PR: https://github.com/facebook/react/pull/8329 - unresolved as of 22/12/2016
  if (isWithinRange(month, {
    start: min,
    end: max
  })) {
    event.persist();
    callback(event, {
      month,
      source
    });
  }
};
const BpkCalendarNav = ({
  changeMonthLabel,
  disabled = false,
  formatMonth,
  id,
  maxDate,
  minDate,
  month,
  nextMonthLabel,
  onMonthChange = () => {},
  previousMonthLabel
}) => {
  const baseMonth = startOfMonth(month);
  const {
    max,
    min
  } = getMonthRange(minDate, maxDate);
  const navigatableMonths = getMonthsInRange(minDate, maxDate);
  const prevMonth = addMonths(baseMonth, -1);
  const nextMonth = addMonths(baseMonth, 1);
  return /*#__PURE__*/_jsx("div", {
    className: getClassName('bpk-calendar-nav'),
    children: /*#__PURE__*/_jsxs("div", {
      style: {
        display: 'table-row'
      },
      children: [/*#__PURE__*/_jsx("div", {
        className: getClassName('bpk-calendar-nav__nudger'),
        children: /*#__PURE__*/_jsxs("button", {
          type: "button",
          className: getClassName('bpk-calendar-nav__button'),
          id: `${id}_month_nudger_previous`,
          onClick: changeMonth({
            month: prevMonth,
            min,
            max,
            callback: onMonthChange,
            source: 'PREV'
          }),
          disabled: disabled || !isWithinRange(prevMonth, {
            start: min,
            end: max
          }),
          children: [/*#__PURE__*/_jsx(ArrowLeftIcon, {
            className: getClassName('bpk-calendar-nav__icon'),
            fill: disabled || !isWithinRange(prevMonth, {
              start: min,
              end: max
            }) ? textColors.textDisabledDay : 'currentcolor'
          }), /*#__PURE__*/_jsx("span", {
            className: getClassName('bpk-calendar-nav__text--hidden'),
            children: previousMonthLabel
          })]
        })
      }), /*#__PURE__*/_jsxs("div", {
        className: getClassName('bpk-calendar-nav__month'),
        children: [/*#__PURE__*/_jsx("label", {
          htmlFor: `${id}_select`,
          className: getClassName('bpk-calendar-nav__text--hidden'),
          children: changeMonthLabel
        }), /*#__PURE__*/_jsx(BpkSelect, {
          id: `${id}_select`,
          name: "months",
          value: formatIsoMonth(baseMonth),
          disabled: disabled,
          onChange: event => {
            event.persist();
            onMonthChange(event, {
              month: parseIsoDate(event.target.value),
              source: 'SELECT'
            });
          },
          children: navigatableMonths.map(m => /*#__PURE__*/_jsx("option", {
            value: formatIsoMonth(m),
            children: formatMonth(m)
          }, m.toString()))
        })]
      }), /*#__PURE__*/_jsx("div", {
        className: getClassName('bpk-calendar-nav__nudger'),
        children: /*#__PURE__*/_jsxs("button", {
          type: "button",
          className: getClassName('bpk-calendar-nav__button'),
          id: `${id}_month_nudger_next`,
          onClick: changeMonth({
            month: nextMonth,
            min,
            max,
            callback: onMonthChange,
            source: 'NEXT'
          }),
          disabled: disabled || !isWithinRange(addMonths(baseMonth, 1), {
            start: min,
            end: max
          }),
          children: [/*#__PURE__*/_jsx(ArrowRightIcon, {
            className: getClassName('bpk-calendar-nav__icon'),
            fill: disabled || !isWithinRange(addMonths(baseMonth, 1), {
              start: min,
              end: max
            }) ? textColors.textDisabledDay : 'currentcolor'
          }), /*#__PURE__*/_jsx("span", {
            className: getClassName('bpk-calendar-nav__text--hidden'),
            children: nextMonthLabel
          })]
        })
      }), /*#__PURE__*/_jsx(BpkAriaLive, {
        children: formatMonth(baseMonth)
      })]
    })
  });
};
export default BpkCalendarNav;