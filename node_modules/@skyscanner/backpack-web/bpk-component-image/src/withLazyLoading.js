/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2016 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Component } from 'react';
import throttle from 'lodash/throttle';
import { wrapDisplayName } from "../../bpk-react-utils";
import { jsx as _jsx } from "react/jsx-runtime";
export default function withLazyLoading(WrappedComponent, documentRef) {
  class WithLazyLoading extends Component {
    static defaultProps = {
      style: {},
      className: ''
    };
    constructor(props) {
      super(props);
      this.state = {
        inView: false
      };
    }
    componentDidMount() {
      documentRef?.addEventListener('scroll', this.checkInView, {
        ...this.getPassiveArgs()
      });
      documentRef?.addEventListener('resize', this.checkInView);
      documentRef?.addEventListener('orientationchange', this.checkInView);
      documentRef?.addEventListener('fullscreenchange', this.checkInView);
      // call checkInView immediately incase the
      // component is already in view prior to scrolling
      this.checkInView();
    }
    componentWillUnmount() {
      this.removeEventListeners();
    }
    setInView = () => {
      this.setState(() => ({
        inView: true
      }));
      this.removeEventListeners();
    };
    getPassiveArgs() {
      return this.supportsPassiveEvents() ? {
        capture: true,
        passive: true
      } : {
        capture: true
      };
    }
    removeEventListeners = () => {
      documentRef?.removeEventListener('scroll', this.checkInView, {
        ...this.getPassiveArgs()
      });
      documentRef?.removeEventListener('resize', this.checkInView);
      documentRef?.removeEventListener('orientationchange', this.checkInView);
      documentRef?.removeEventListener('fullscreenchange', this.checkInView);
    };
    checkInView = throttle(() => {
      if (this.isInViewPort()) {
        this.setInView();
      }
    }, 250);

    // This function is taken from modernizr
    // See https://github.com/modernizr/modernizr
    supportsPassiveEvents = () => {
      let supportsPassiveOption = false;
      try {
        const opts = Object.defineProperty({}, 'passive', {
          get() {
            supportsPassiveOption = true;
            return supportsPassiveOption;
          }
        });
        const noop = function () {};
        window.addEventListener('test', noop, opts);
        window.removeEventListener('test', noop, opts);
      } catch (e) {
        return false;
      }
      return supportsPassiveOption;
    };
    isInViewPort = () => {
      if (!this.element) return false;
      const rect = this.element.getBoundingClientRect();
      const viewPortHeight = documentRef ? Math.max(window.innerHeight, documentRef.documentElement.clientHeight) : -1;
      const viewPortWidth = documentRef ? Math.max(window.innerWidth, documentRef.documentElement.clientWidth) : -1;
      return rect.bottom >= 0 && rect.right >= 0 && rect.top < viewPortHeight && rect.left < viewPortWidth;
    };
    render() {
      const {
        className,
        style,
        ...rest
      } = this.props;
      return /*#__PURE__*/_jsx("div", {
        id: this.placeholderReference,
        ref: element => {
          this.element = element;
        },
        style: style,
        className: className,
        children: /*#__PURE__*/_jsx(WrappedComponent, {
          inView: this.state.inView,
          ...rest
        })
      });
    }
  }
  WithLazyLoading.displayName = wrapDisplayName(WrappedComponent, 'withLazyLoading');
  return WithLazyLoading;
}