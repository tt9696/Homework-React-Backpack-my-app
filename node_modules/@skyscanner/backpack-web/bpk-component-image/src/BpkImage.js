/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2016 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Component } from 'react';

// @ts-expect-error Untyped import. See `decisions/imports-ts-suppressions.md`.
import CSSTransition from 'react-transition-group/CSSTransition';
import { animations } from '@skyscanner/bpk-foundations-web/tokens/base.es6';
import { BpkSpinner } from "../../bpk-component-spinner";
import { cssModules } from "../../bpk-react-utils";
import BORDER_RADIUS_STYLES from "./BpkImageBorderRadiusStyles";
import STYLES from "./BpkImage.module.css";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const getClassName = cssModules(STYLES);
class Image extends Component {
  static defaultProps = {
    hidden: false
  };
  constructor(props) {
    super(props);
    this.img = null;
  }
  componentDidMount() {
    if (this.img && this.img.src && this.img.complete) {
      if (this.props.onImageLoad) {
        this.props.onImageLoad();
      }
    }
  }
  setImgRef = el => {
    this.img = el;
  };
  render() {
    const {
      altText,
      hidden,
      onImageLoad,
      ...rest
    } = this.props;
    const imgClassNames = [getClassName('bpk-image__img')];
    if (hidden) {
      imgClassNames.push(getClassName('bpk-image__img--hidden'));
    }
    return /*#__PURE__*/_jsx("img", {
      className: imgClassNames.join(' '),
      alt: altText,
      onLoad: onImageLoad,
      ref: this.setImgRef,
      ...rest
    });
  }
}
class BpkImage extends Component {
  static defaultProps = {
    borderRadiusStyle: BORDER_RADIUS_STYLES.none,
    inView: true,
    loading: false,
    onLoad: null,
    style: {},
    suppressHydrationWarning: false
  };
  onImageLoad = () => {
    if (this.props.onLoad) {
      this.props.onLoad();
    }
  };
  getAspectRatio = () => {
    if (this.props.aspectRatio) {
      return this.props.aspectRatio;
    }
    return 1;
  };
  render() {
    const {
      altText,
      aspectRatio,
      borderRadiusStyle,
      className,
      inView,
      loading,
      onLoad,
      style,
      ...rest
    } = this.props;
    const classNames = [getClassName('bpk-image')];
    const aspectRatioPercentage = `${100 / this.getAspectRatio()}%`;
    if (!loading) {
      classNames.push(getClassName('bpk-image--no-background'));
    }
    if (borderRadiusStyle !== BORDER_RADIUS_STYLES.none) {
      classNames.push(getClassName(`bpk-image--border-radius-${BORDER_RADIUS_STYLES[borderRadiusStyle]}`));
    }

    // wraps a div with maxWidth and maxHeight set iff full-width is no required.
    // This ensures that the css / html do not reserve too much spacing
    // when width 100% is not being used
    return /*#__PURE__*/_jsx("div", {
      style: style,
      className: className,
      children: /*#__PURE__*/_jsxs("div", {
        ref: div => {
          this.placeholder = div;
        },
        style: {
          height: 0,
          paddingBottom: aspectRatioPercentage
        },
        className: classNames.join(' '),
        suppressHydrationWarning: this.props.suppressHydrationWarning,
        children: [inView && /*#__PURE__*/_jsx(Image, {
          hidden: loading,
          altText: altText,
          onImageLoad: this.onImageLoad,
          ...rest
        }), loading && /*#__PURE__*/_jsx(CSSTransition, {
          classNames: {
            exit: getClassName('bpk-image__spinner--shown'),
            exitActive: getClassName('bpk-image__spinner--hidden')
          },
          timeout: parseInt(animations.durationBase, 10),
          children: /*#__PURE__*/_jsx("div", {
            className: getClassName('bpk-image__spinner'),
            children: /*#__PURE__*/_jsx(BpkSpinner, {})
          })
        }), typeof window === 'undefined' && (!inView || loading) && /*#__PURE__*/_jsx("noscript", {
          children: /*#__PURE__*/_jsx(Image, {
            altText: altText,
            onImageLoad: this.onImageLoad,
            ...rest
          })
        })]
      })
    });
  }
}
export default BpkImage;