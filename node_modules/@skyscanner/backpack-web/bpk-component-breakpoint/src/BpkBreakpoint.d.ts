import type { ReactElement, ReactNode } from 'react';
declare const BREAKPOINTS: {
    readonly SMALL_MOBILE: "(max-width: 22.4375rem)";
    readonly MOBILE: "(max-width: 32rem)";
    readonly SMALL_TABLET: "(max-width: 48rem)";
    readonly SMALL_TABLET_ONLY: "(min-width: 32.0625rem) and (max-width: 48rem)";
    readonly TABLET: "(max-width: 64rem)";
    readonly TABLET_ONLY: "(min-width: 32.0625rem) and (max-width: 64rem)";
    readonly ABOVE_MOBILE: "(min-width: 32.0625rem)";
    readonly ABOVE_TABLET: "(min-width: 64.0625rem)";
    readonly ABOVE_DESKTOP: "(min-width: 80.0625rem)";
    readonly DESKTOP_ONLY: "(min-width: 64.0625rem) and (max-width: 80rem)";
};
type Props = {
    /**
     * The content to render when the breakpoint matches.
     */
    children: ReactNode | ((matches: boolean) => ReactNode | null);
    query: string | (typeof BREAKPOINTS)[keyof typeof BREAKPOINTS];
    legacy?: boolean;
    matchSSR?: boolean;
};
declare const BpkBreakpoint: ({ children, legacy, matchSSR, query, }: Props) => ReactElement<any, string | import("react").JSXElementConstructor<any>> | null;
export { BREAKPOINTS };
export default BpkBreakpoint;
