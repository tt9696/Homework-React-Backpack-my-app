import type { SyntheticEvent, ReactNode } from "react";
interface CommonProps {
    children: ReactNode;
    closeOnEscPressed?: boolean;
    closeOnScrimClick?: boolean;
    dialogClassName?: string;
    id: string | undefined;
    isOpen: boolean;
    onClose: (arg0?: TouchEvent | MouseEvent | KeyboardEvent | SyntheticEvent<HTMLDialogElement, Event>, arg1?: {
        source: 'ESCAPE' | 'DOCUMENT_CLICK';
    }) => void | null;
    exiting?: boolean;
    transitionClassNames?: {
        appear?: string;
        appearActive?: string;
        exit?: string;
    };
    timeout?: {
        appear?: number;
        exit?: number;
    };
}
export type Props = CommonProps & ({
    ariaLabelledby: string;
} | {
    ariaLabel: string;
});
export declare const BpkDialogWrapper: ({ children, closeOnEscPressed, closeOnScrimClick, dialogClassName, exiting, id, isOpen, onClose, timeout, transitionClassNames, ...ariaProps }: Props) => JSX.Element | null;
export {};
