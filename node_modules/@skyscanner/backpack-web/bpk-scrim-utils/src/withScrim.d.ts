import type { ComponentType } from 'react';
export type Props = {
    /**
     * The `pagewrap` element id is a convention we use internally at Skyscanner. In most cases it should "just work".
     */
    getApplicationElement: () => HTMLElement | null;
    /**
     * This is required unless `closeOnScrimClick` is false. It should be set as the `onClick` action on a button or a link.
     */
    onClose?: () => void | null;
    /**
     * Can be used to apply iPhone only styles or behaviour, as it has different scrolling behaviour
     */
    isIphone?: boolean;
    isIpad?: boolean;
    /**
     * It can be used to apply styles to the full-screen container into which the enriched component is inserted (e.g. `display: flex` or `display: grid`)
     */
    containerClassName?: string;
    closeOnScrimClick?: boolean;
    [rest: string]: any;
};
declare const withScrim: <P extends object>(WrappedComponent: ComponentType<P> | string) => {
    new (props: (Props & Omit<P, "dialogRef">) | Readonly<Props & Omit<P, "dialogRef">>): {
        dialogElement?: HTMLElement | null | undefined;
        componentDidMount(): void;
        componentWillUnmount(): void;
        dialogRef: (ref: HTMLElement | null | undefined) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Props & Omit<P, "dialogRef">>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Props & Omit<P, "dialogRef">> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<Props & Omit<P, "dialogRef">>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Props & Omit<P, "dialogRef">>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Props & Omit<P, "dialogRef">>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Props & Omit<P, "dialogRef">>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Props & Omit<P, "dialogRef">>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Props & Omit<P, "dialogRef">>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Props & Omit<P, "dialogRef">>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Props & Omit<P, "dialogRef">, context: any): {
        dialogElement?: HTMLElement | null | undefined;
        componentDidMount(): void;
        componentWillUnmount(): void;
        dialogRef: (ref: HTMLElement | null | undefined) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Props & Omit<P, "dialogRef">>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Props & Omit<P, "dialogRef">> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<Props & Omit<P, "dialogRef">>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Props & Omit<P, "dialogRef">>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Props & Omit<P, "dialogRef">>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Props & Omit<P, "dialogRef">>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Props & Omit<P, "dialogRef">>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Props & Omit<P, "dialogRef">>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Props & Omit<P, "dialogRef">>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    defaultProps: {
        onClose: null;
        isIphone: boolean;
        isIpad: boolean;
        containerClassName: null;
        closeOnScrimClick: boolean;
    };
    contextType?: import("react").Context<any> | undefined;
};
export default withScrim;
