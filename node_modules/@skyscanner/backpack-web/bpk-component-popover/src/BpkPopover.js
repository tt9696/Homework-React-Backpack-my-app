/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2016 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useState, useRef, cloneElement, isValidElement } from 'react';
import { useFloating, autoUpdate, offset, useClick, useDismiss, useInteractions, FloatingFocusManager, arrow, FloatingArrow, flip, shift } from '@floating-ui/react';
import { surfaceHighlightDay } from '@skyscanner/bpk-foundations-web/tokens/base.es6';

// @ts-expect-error Untyped import. See `decisions/imports-ts-suppressions.md`.
import BpkCloseButton from "../../bpk-component-close-button";
// @ts-expect-error Untyped import. See `decisions/imports-ts-suppressions.md`.
import { BpkButtonLink } from "../../bpk-component-link";
import BpkText, { TEXT_STYLES } from "../../bpk-component-text";
import { TransitionInitialMount, cssModules } from "../../bpk-react-utils";
import { ARROW_ID } from "./constants";
import STYLES from "./BpkPopover.module.css";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
const getClassName = cssModules(STYLES);
const EVENT_SOURCES = {
  CLOSE_BUTTON: 'CLOSE_BUTTON',
  CLOSE_LINK: 'CLOSE_LINK'
};

// The stroke width is used to set the border width of the arrow.
const strokeWidth = 0.0625;
const bindEventSource = (source, callback, event) => {
  if (event.persist) {
    event.persist();
  }
  callback(event, {
    source
  });
};
const BpkPopover = ({
  actionText,
  children,
  className = null,
  closeButtonIcon = true,
  closeButtonLabel,
  closeButtonProps = {},
  closeButtonText,
  id,
  isOpen = false,
  label,
  labelAsTitle = false,
  onAction,
  onClose,
  padded = true,
  placement = 'bottom',
  showArrow = true,
  target,
  ...rest
}) => {
  const [isOpenState, setIsOpenState] = useState(isOpen);
  const arrowRef = useRef(null);
  const {
    context,
    floatingStyles,
    refs
  } = useFloating({
    open: isOpenState,
    onOpenChange: setIsOpenState,
    placement,
    middleware: [showArrow && offset(17), flip({
      crossAxis: true
    }), shift(), showArrow && arrow({
      element: arrowRef
    })],
    whileElementsMounted: autoUpdate
  });
  const click = useClick(context);
  const dismiss = useDismiss(context);

  // Merge all the interactions into prop getters
  const {
    getFloatingProps,
    getReferenceProps
  } = useInteractions([click, dismiss]);
  const targetElement = /*#__PURE__*/isValidElement(target) ? ( /*#__PURE__*/cloneElement(target, {
    ...getReferenceProps(),
    // @ts-ignore - we're adding a popover ref to the target element so we can position the popover relative to it
    ref: refs.setReference
  })) : /*#__PURE__*/_jsx("div", {
    ref: refs.setReference,
    ...getReferenceProps(),
    children: target
  });
  const classNames = getClassName('bpk-popover', className);
  const bodyClassNames = getClassName(padded && 'bpk-popover__body--padded');
  const labelId = `bpk-popover-label-${id}`;
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [targetElement, isOpenState && /*#__PURE__*/_jsx(FloatingFocusManager, {
      context: context,
      modal: false,
      children: /*#__PURE__*/_jsx("div", {
        className: getClassName('bpk-popover--container'),
        ref: refs.setFloating,
        style: floatingStyles,
        ...getFloatingProps(),
        children: /*#__PURE__*/_jsx(TransitionInitialMount, {
          appearClassName: getClassName('bpk-popover--appear'),
          appearActiveClassName: getClassName('bpk-popover--appear-active'),
          transitionTimeout: 200,
          children: /*#__PURE__*/_jsxs("section", {
            id: id,
            tabIndex: -1,
            role: "dialog",
            "aria-labelledby": labelId,
            className: classNames,
            ...rest,
            children: [showArrow && /*#__PURE__*/_jsx(FloatingArrow, {
              ref: arrowRef,
              context: context,
              id: ARROW_ID,
              className: getClassName('bpk-popover__arrow'),
              role: "presentation",
              stroke: surfaceHighlightDay,
              strokeWidth: strokeWidth
            }), labelAsTitle ? /*#__PURE__*/_jsxs("header", {
              className: getClassName('bpk-popover__header'),
              children: [/*#__PURE__*/_jsx(BpkText, {
                tagName: "h2",
                id: labelId,
                textStyle: TEXT_STYLES.label1,
                children: label
              }), "\xA0", closeButtonIcon ? /*#__PURE__*/_jsx(BpkCloseButton, {
                label: closeButtonText || closeButtonLabel,
                onClick: event => {
                  bindEventSource(EVENT_SOURCES.CLOSE_BUTTON, onClose, event);
                  setIsOpenState(false);
                },
                ...closeButtonProps
              }) : closeButtonText && /*#__PURE__*/_jsx(BpkButtonLink, {
                onClick: event => {
                  bindEventSource(EVENT_SOURCES.CLOSE_LINK, onClose, event);
                  setIsOpenState(false);
                },
                ...closeButtonProps,
                children: closeButtonText
              })]
            }) : /*#__PURE__*/_jsx("span", {
              id: labelId,
              className: getClassName('bpk-popover__label'),
              children: label
            }), /*#__PURE__*/_jsx("div", {
              className: bodyClassNames,
              children: children
            }), actionText && onAction && /*#__PURE__*/_jsx("div", {
              className: getClassName('bpk-popover__action'),
              children: /*#__PURE__*/_jsx(BpkButtonLink, {
                onClick: onAction,
                children: actionText
              })
            }), !labelAsTitle && closeButtonText && /*#__PURE__*/_jsx("footer", {
              className: getClassName('bpk-popover__footer'),
              children: /*#__PURE__*/_jsx(BpkButtonLink, {
                onClick: event => {
                  bindEventSource(EVENT_SOURCES.CLOSE_LINK, onClose, event);
                  setIsOpenState(false);
                },
                ...closeButtonProps,
                children: closeButtonText
              })
            })]
          })
        })
      })
    })]
  });
};
export default BpkPopover;