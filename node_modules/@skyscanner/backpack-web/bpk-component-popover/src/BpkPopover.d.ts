import type { SyntheticEvent, ReactNode, ReactElement } from 'react';
import type { Placement } from '@floating-ui/react';
declare const EVENT_SOURCES: {
    CLOSE_BUTTON: string;
    CLOSE_LINK: string;
};
type CloseButtonProps = ({
    /**
     * @deprecated close button text is deprecated. Instead, please use `closeButtonIcon`, or you may opt not to render a close button at all.
     */
    closeButtonText: string;
} | {
    closeButtonText?: never;
});
export type Props = CloseButtonProps & {
    children: ReactNode;
    id: string;
    label: string;
    onClose: (event: SyntheticEvent<HTMLButtonElement>, props: {
        source: (typeof EVENT_SOURCES)[keyof typeof EVENT_SOURCES];
    }) => void;
    className?: string | null;
    closeButtonIcon?: boolean;
    closeButtonProps?: Object;
    isOpen?: boolean;
    labelAsTitle?: boolean;
    padded?: boolean;
    placement?: Placement;
    showArrow?: Boolean;
    target: ReactElement<any>;
    closeButtonLabel?: string;
    actionText?: string;
    onAction?: () => void;
};
declare const BpkPopover: ({ actionText, children, className, closeButtonIcon, closeButtonLabel, closeButtonProps, closeButtonText, id, isOpen, label, labelAsTitle, onAction, onClose, padded, placement, showArrow, target, ...rest }: Props) => JSX.Element;
export default BpkPopover;
