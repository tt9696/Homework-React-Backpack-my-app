/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2016 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */import PropTypes from 'prop-types';
import { cloneElement } from 'react';
import BpkFormValidation from "../../bpk-component-form-validation";
import BpkLabel from "../../bpk-component-label";
import { cssModules } from "../../bpk-react-utils";
import STYLES from "./BpkFieldset.module.css";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const getClassName = cssModules(STYLES);
const BpkFieldset = props => {
  const {
    children,
    className,
    description,
    disabled,
    isCheckbox,
    label,
    required,
    valid,
    validationMessage,
    validationProps,
    ...rest
  } = props;
  if (!children) {
    return null;
  }

  // $FlowIgnore[prop-missing] - As children could be any element and might not have a value which is safe
  let childId = children.props.id;
  if (
  // Flow is being dumb here and doesn't let us do this check, even though it's perfectly safe!
  // $FlowIgnore[prop-missing]
  // $FlowIgnore[sketchy-null-mixed]
  children.props.inputProps &&
  // $FlowIgnore[sketchy-null-mixed]
  children.props.inputProps.id && typeof children.props.inputProps.id === 'string') {
    childId = children.props.inputProps.id;
  }
  const classNames = [getClassName('bpk-fieldset')];
  const validationMessageId = `${childId}_validation_message`;
  const descriptionId = `${childId}_description`;
  const isValid = isCheckbox ? valid : children.props.valid;

  // Explicit check for false primitive value as undefined is
  // treated as neither valid nor invalid
  const isInvalid = isValid === false;
  const childrenProps = {
    disabled
  };
  if (isCheckbox) {
    childrenProps.required = required;
  } else {
    childrenProps['aria-required'] = required;
  }
  if (validationMessage && isInvalid) {
    childrenProps['aria-describedby'] = validationMessageId;
  } else if (description) {
    childrenProps['aria-describedby'] = descriptionId;
  }
  const clonedChildren = /*#__PURE__*/cloneElement(children, childrenProps);
  if (className) {
    classNames.push(className);
  }
  return (
    /*#__PURE__*/
    // $FlowFixMe[cannot-spread-inexact] - inexact rest. See 'decisions/flowfixme.md'.
    _jsxs("fieldset", {
      className: classNames.join(' '),
      ...rest,
      children: [!isCheckbox && /*#__PURE__*/_jsx("div", {
        className: getClassName('bpk-fieldset__label'),
        children: /*#__PURE__*/_jsx(BpkLabel, {
          htmlFor: childId,
          required: required,
          disabled: disabled,
          valid: isValid,
          children: label
        })
      }), clonedChildren, description && /*#__PURE__*/_jsx("span", {
        className: getClassName('bpk-fieldset__description'),
        id: descriptionId,
        children: description
      }), !disabled && validationMessage &&
      /*#__PURE__*/
      // $FlowFixMe[cannot-spread-inexact] - inexact rest. See 'decisions/flowfixme.md'.
      _jsx(BpkFormValidation, {
        id: validationMessageId,
        expanded: isInvalid,
        isCheckbox: isCheckbox,
        ...validationProps,
        children: validationMessage
      })]
    })
  );
};
const labelPropType = (props, propName) => {
  const {
    isCheckbox,
    label
  } = props;
  if (!label && !isCheckbox) {
    return new Error(`\`${propName}\` is required when \`isCheckbox\` is false.`);
  }
  return false;
};
export const propTypes = {
  children: PropTypes.element.isRequired,
  /**
   * Required when `isCheckbox` is false.
   */
  label: labelPropType,
  disabled: PropTypes.bool,
  valid: PropTypes.bool,
  required: PropTypes.bool,
  className: PropTypes.string,
  validationMessage: PropTypes.string,
  isCheckbox: PropTypes.bool,
  validationProps: PropTypes.object,
  description: PropTypes.string
};
export const defaultProps = {
  label: null,
  disabled: false,
  valid: null,
  required: false,
  className: null,
  validationMessage: null,
  isCheckbox: false,
  validationProps: {},
  description: null
};
BpkFieldset.propTypes = {
  ...propTypes
};
BpkFieldset.defaultProps = {
  ...defaultProps
};
export default BpkFieldset;